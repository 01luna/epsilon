name: Continuous Integration
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  MAKEFLAGS: ${{ endswith(github.repository, '/epsilon-internal') && '-j32' || '-j2' }}

jobs:
  android:
    runs-on: ubuntu-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - run: pip3 install lz4 pypng stringcase
      - uses: actions/checkout@v2
      - run: make PLATFORM=simulator TARGET=android
      - run: make PLATFORM=simulator TARGET=android epsilon.apk
      - run: make PLATFORM=simulator TARGET=android test.apk
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-android.apk
          path: output/release/simulator/android/epsilon.apk
  n0110:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - run: sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config
      - run: pip3 install lz4 pypng stringcase
      - uses: numworks/setup-arm-toolchain@latest
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SHELLY_ANN_PAT }}
          submodules: true
      - run: make MODEL=n0110 epsilon.dfu epsilon.onboarding.dfu epsilon.onboarding.update.dfu
      - run: make MODEL=n0110 flasher.dfu
      - run: make MODEL=n0110 bench.ram.dfu
  n0120:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - run: sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config
      - run: pip3 install lz4 pypng stringcase
      - uses: numworks/setup-arm-toolchain@latest
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.SHELLY_ANN_PAT }}
          submodules: true
      - run: make MODEL=n0120 epsilon.dfu epsilon.onboarding.dfu epsilon.onboarding.update.dfu
      - run: make MODEL=n0120 flasher.dfu
      - run: make MODEL=n0120 bench.ram.dfu
  windows:
    runs-on: windows-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    defaults:
       run:
         shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
      - uses: actions/checkout@v2
      - run: pacman -S --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-freetype mingw-w64-x86_64-pkg-config make mingw-w64-x86_64-python3 mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-libpng mingw-w64-x86_64-imagemagick mingw-w64-x86_64-librsvg mingw-w64-x86_64-inkscape mingw-w64-x86_64-python3-pip
      - run: pip3 install lz4 pypng stringcase
      - run: make PLATFORM=simulator
      - run: make PLATFORM=simulator epsilon.exe
      - run: make PLATFORM=simulator test.exe
      - run: cmd /c output\release\simulator\windows\test.exe --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-windows.exe
          path: output/release/simulator/windows/epsilon.exe
  web:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: numworks/setup-emscripten@v1
        with:
          sdk: 1.39.16-fastcomp
      - run: pip3 install lz4 pypng stringcase
      - uses: actions/checkout@v2
      - run: make PLATFORM=simulator TARGET=web epsilon.zip test.js
      - run: timeout 5m node output/release/simulator/web/test.js --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-web.zip
          path: output/release/simulator/web/epsilon.zip
          retention-days: 7
  linux:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - run: sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config
      - run: pip3 install lz4 pypng stringcase
      - uses: actions/checkout@v2
      - run: make PLATFORM=simulator ASAN=1 epsilon.bin test.bin
      - run: output/release/simulator/linux/test.bin --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
        with:
          name: epsilon-linux.bin
          path: output/release/simulator/linux/epsilon.bin
  macos:
    runs-on: macOS-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - run: brew install numworks/tap/epsilon-sdk
      - uses: actions/checkout@v2
      - run: make PLATFORM=simulator
      - run: make PLATFORM=simulator epsilon.app
      - run: make PLATFORM=simulator ARCH=x86_64 test.bin
      - run: output/release/simulator/macos/x86_64/test.bin --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-macos.zip
          path: output/release/simulator/macos/epsilon.app
  ios:
    runs-on: macOS-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - run: brew install numworks/tap/epsilon-sdk
      - uses: actions/checkout@v2
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 epsilon.ipa
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 test.ipa
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 APPLE_PLATFORM=ios-simulator
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-ios.ipa
          path: output/release/simulator/ios/epsilon.ipa
