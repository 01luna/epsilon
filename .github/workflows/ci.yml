name: Continuous Integration
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  MAKEFLAGS: ${{ endswith(github.repository, '/epsilon-internal') && '-j32' || '-j2' }}

jobs:
  android:
    runs-on: ubuntu-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - run: $ANDROID_HOME/tools/bin/sdkmanager "ndk;22.1.7171670"
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator TARGET=android
      - run: make PLATFORM=simulator TARGET=android epsilon.apk
      - run: make PLATFORM=simulator TARGET=android test.apk
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-android.apk
          path: output/release/simulator/android/epsilon.apk
  n0110:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: numworks/setup-arm-toolchain@latest
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: true
      - run: build/setup.sh
      - name: Disable epsilon-core submodule
        run: mv ion/src/device/epsilon-core ion/src/device/epsilon-core-disable
      - name: Build userlands
        # Since both slots have the exact same amount of Flash reserved, it is pointless to build both the A and B elfs for every variant.
        # As an exception,  because we'll build epsilon.dfu that on both userland.A.elf and userland.B.elf, we still build those here
        # TODO: It is also probably useless to build so many variants
        run: make MODEL=n0110 userland.A.elf userland.B.elf userland.allow3rdparty.A.elf userland.onboarding.A.elf userland.onboarding.allow3rdparty.A.elf userland.onboarding.update.A.elf userland.onboarding.beta.A.elf userland.onboarding.beta.allow3rdparty.A.elf
      - name: Restore epsilon-core submodule
        run: mv ion/src/device/epsilon-core-disable ion/src/device/epsilon-core
      - run: make MODEL=n0110 epsilon.dfu
      - run: make MODEL=n0110 flasher.dfu
      - run: make MODEL=n0110 bench.ram.dfu
  n0120:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: numworks/setup-arm-toolchain@latest
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: true
      - run: build/setup.sh
      - name: Disable epsilon-core submodule
        run: mv ion/src/device/epsilon-core ion/src/device/epsilon-core-disable
      - name: Build userland
        run: make MODEL=n0110 userland.A.dfu userland.B.dfu
      - name: Restore epsilon-core submodule
        run: mv ion/src/device/epsilon-core-disable ion/src/device/epsilon-core
      - run: make MODEL=n0120 epsilon.dfu
      - run: make MODEL=n0120 epsilon.allow3rdparty.dfu
      - run: make MODEL=n0120 epsilon.onboarding.dfu
      - run: make MODEL=n0120 epsilon.onboarding.allow3rdparty.dfu
      - run: make MODEL=n0120 epsilon.onboarding.update.dfu
      - run: make MODEL=n0120 epsilon.onboarding.beta.dfu
      - run: make MODEL=n0120 epsilon.onboarding.beta.allow3rdparty.dfu
      - run: make MODEL=n0120 flasher.dfu
      - run: make MODEL=n0120 bench.ram.dfu
  windows:
    runs-on: windows-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    defaults:
       run:
         shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator
      - run: make PLATFORM=simulator epsilon.exe
      - run: make PLATFORM=simulator test.exe
      - run: cmd /c output\release\simulator\windows\test.exe --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-windows.exe
          path: output/release/simulator/windows/epsilon.exe
  web:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: numworks/setup-emscripten@v1
        with:
          sdk: 1.39.16-fastcomp
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator TARGET=web epsilon.zip test.js
      - run: timeout 5m node output/release/simulator/web/test.js --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-web.zip
          path: output/release/simulator/web/epsilon.zip
          retention-days: 7
  linux:
    runs-on: ${{ endswith(github.repository, '/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator ASAN=1 epsilon.bin test.bin
      - run: output/release/simulator/linux/test.bin --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
        with:
          name: epsilon-linux.bin
          path: output/release/simulator/linux/epsilon.bin
  macos:
    runs-on: macOS-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator
      - run: make PLATFORM=simulator epsilon.app
      - run: make PLATFORM=simulator ARCH=x86_64 test.bin
      - run: output/release/simulator/macos/x86_64/test.bin --headless --limit-stack-usage
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-macos.zip
          path: output/release/simulator/macos/epsilon.app
  ios:
    runs-on: macOS-latest
    if: ${{ ! endswith(github.repository, '/epsilon-internal') }}
    steps:
      - uses: actions/checkout@v2
      - run: build/setup.sh --only-simulator
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 epsilon.ipa
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 test.ipa
      - run: make PLATFORM=simulator TARGET=ios EPSILON_TELEMETRY=0 APPLE_PLATFORM=ios-simulator
      - uses: actions/upload-artifact@master
        with:
          name: epsilon-ios.ipa
          path: output/release/simulator/ios/epsilon.ipa
