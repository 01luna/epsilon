typedef enum {
  GPIOA = 0,
  GPIOB = 1,
  GPIOC = 2,
  GPIOD = 3,
  GPIOE = 4,
  GPIOF = 5,
  GPIOG = 6,
  GPIOH = 7,
  GPIOI = 8,
  GPIOJ = 9,
  GPIOK = 10
} GPIO_t;

#pragma mark - GPIO port mode registers

typedef enum {
  GPIO_MODE_INPUT = 0,
  GPIO_MODE_OUTPUT = 1,
  GPIO_MODE_ALTERNATE_FUNCTION = 2,
  GPIO_MODE_ANALOG = 3
} GPIO_MODE_t;

typedef struct {
  GPIO_MODE_t MODER0:2;
  GPIO_MODE_t MODER1:2;
  GPIO_MODE_t MODER2:2;
  GPIO_MODE_t MODER3:2;
  GPIO_MODE_t MODER4:2;
  GPIO_MODE_t MODER5:2;
  GPIO_MODE_t MODER6:2;
  GPIO_MODE_t MODER7:2;
  GPIO_MODE_t MODER8:2;
  GPIO_MODE_t MODER9:2;
  GPIO_MODE_t MODER10:2;
  GPIO_MODE_t MODER11:2;
  GPIO_MODE_t MODER12:2;
  GPIO_MODE_t MODER13:2;
  GPIO_MODE_t MODER14:2;
  GPIO_MODE_t MODER15:2;
} GPIO_MODER_t;

extern GPIO_MODER_t * GPIOA_MODER;
extern GPIO_MODER_t * GPIOB_MODER;
extern GPIO_MODER_t * GPIOC_MODER;
extern GPIO_MODER_t * GPIOD_MODER;
extern GPIO_MODER_t * GPIOE_MODER;
extern GPIO_MODER_t * GPIOF_MODER;
extern GPIO_MODER_t * GPIOG_MODER;
extern GPIO_MODER_t * GPIOH_MODER;
extern GPIO_MODER_t * GPIOI_MODER;
extern GPIO_MODER_t * GPIOJ_MODER;
extern GPIO_MODER_t * GPIOK_MODER;

GPIO_MODER_t * GPIO_MODER(GPIO_t gpio);

#pragma mark - GPIO port output type registers

typedef enum {
  GPIO_OTYPE_PUSH_PULL = 0,
  GPIO_OTYPE_OPEN_DRAIN = 1
} GPIO_OTYPE_t;

typedef struct {
  GPIO_OTYPE_t OT0:1;
  GPIO_OTYPE_t OT1:1;
  GPIO_OTYPE_t OT2:1;
  GPIO_OTYPE_t OT3:1;
  GPIO_OTYPE_t OT4:1;
  GPIO_OTYPE_t OT5:1;
  GPIO_OTYPE_t OT6:1;
  GPIO_OTYPE_t OT7:1;
  GPIO_OTYPE_t OT8:1;
  GPIO_OTYPE_t OT9:1;
  GPIO_OTYPE_t OT10:1;
  GPIO_OTYPE_t OT11:1;
  GPIO_OTYPE_t OT12:1;
  GPIO_OTYPE_t OT13:1;
  GPIO_OTYPE_t OT14:1;
  GPIO_OTYPE_t OT15:1;
  unsigned int :16;
} GPIO_OTYPER_t;

extern GPIO_OTYPER_t * GPIOA_OTYPER;
extern GPIO_OTYPER_t * GPIOB_OTYPER;
extern GPIO_OTYPER_t * GPIOC_OTYPER;
extern GPIO_OTYPER_t * GPIOD_OTYPER;
extern GPIO_OTYPER_t * GPIOE_OTYPER;
extern GPIO_OTYPER_t * GPIOF_OTYPER;
extern GPIO_OTYPER_t * GPIOG_OTYPER;
extern GPIO_OTYPER_t * GPIOH_OTYPER;
extern GPIO_OTYPER_t * GPIOI_OTYPER;
extern GPIO_OTYPER_t * GPIOJ_OTYPER;
extern GPIO_OTYPER_t * GPIOK_OTYPER;

GPIO_OTYPER_t * GPIO_OTYPE(GPIO_t gpio);

#pragma mark - GPIO port output speed registers

typedef enum {
  GPIO_OSPEED_LOW_SPEED = 0,
  GPIO_OSPEED_MEDIUM_SPEED = 1,
  GPIO_OSPEED_FAST_SPEED = 2,
  GPIO_OSPEED_HIGH_SPEED = 3
} GPIO_OSPEED_t;

typedef struct {
  GPIO_OSPEED_t OSPEEDR0:2;
  GPIO_OSPEED_t OSPEEDR1:2;
  GPIO_OSPEED_t OSPEEDR2:2;
  GPIO_OSPEED_t OSPEEDR3:2;
  GPIO_OSPEED_t OSPEEDR4:2;
  GPIO_OSPEED_t OSPEEDR5:2;
  GPIO_OSPEED_t OSPEEDR6:2;
  GPIO_OSPEED_t OSPEEDR7:2;
  GPIO_OSPEED_t OSPEEDR8:2;
  GPIO_OSPEED_t OSPEEDR9:2;
  GPIO_OSPEED_t OSPEEDR10:2;
  GPIO_OSPEED_t OSPEEDR11:2;
  GPIO_OSPEED_t OSPEEDR12:2;
  GPIO_OSPEED_t OSPEEDR13:2;
  GPIO_OSPEED_t OSPEEDR14:2;
  GPIO_OSPEED_t OSPEEDR15:2;
} GPIO_OSPEEDR_t;

extern GPIO_OSPEEDR_t * GPIOA_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOB_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOC_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOD_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOE_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOF_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOG_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOH_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOI_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOJ_OSPEEDR;
extern GPIO_OSPEEDR_t * GPIOK_OSPEEDR;

GPIO_OSPEEDR_t * GPIO_OSPEED(GPIO_t gpio);
